/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kaanaydemir.movie.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Movie class */
@org.apache.avro.specific.AvroGenerated
public class Movie extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5228126266530613925L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Movie\",\"namespace\":\"com.kaanaydemir.movie.schemas\",\"doc\":\"Movie class\",\"fields\":[{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Movie Title\",\"default\":\"\"},{\"name\":\"release_date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"rating\",\"type\":\"float\",\"default\":0},{\"name\":\"cast\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Actor\",\"doc\":\"Actor and Actoress\",\"fields\":[{\"name\":\"first_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"last_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"birth_date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}],\"version\":1}}}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Movie> ENCODER =
      new BinaryMessageEncoder<Movie>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Movie> DECODER =
      new BinaryMessageDecoder<Movie>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Movie> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Movie> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Movie>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Movie to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Movie from a ByteBuffer. */
  public static Movie fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Movie Title */
  @Deprecated public java.lang.String title;
  @Deprecated public java.lang.String release_date;
  @Deprecated public float rating;
  @Deprecated public java.util.List<com.kaanaydemir.movie.schemas.Actor> cast;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Movie() {}

  /**
   * All-args constructor.
   * @param title Movie Title
   * @param release_date The new value for release_date
   * @param rating The new value for rating
   * @param cast The new value for cast
   */
  public Movie(java.lang.String title, java.lang.String release_date, java.lang.Float rating, java.util.List<com.kaanaydemir.movie.schemas.Actor> cast) {
    this.title = title;
    this.release_date = release_date;
    this.rating = rating;
    this.cast = cast;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return release_date;
    case 2: return rating;
    case 3: return cast;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: title = (java.lang.String)value$; break;
    case 1: release_date = (java.lang.String)value$; break;
    case 2: rating = (java.lang.Float)value$; break;
    case 3: cast = (java.util.List<com.kaanaydemir.movie.schemas.Actor>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return Movie Title
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * Movie Title
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'release_date' field.
   * @return The value of the 'release_date' field.
   */
  public java.lang.String getReleaseDate() {
    return release_date;
  }

  /**
   * Sets the value of the 'release_date' field.
   * @param value the value to set.
   */
  public void setReleaseDate(java.lang.String value) {
    this.release_date = value;
  }

  /**
   * Gets the value of the 'rating' field.
   * @return The value of the 'rating' field.
   */
  public java.lang.Float getRating() {
    return rating;
  }

  /**
   * Sets the value of the 'rating' field.
   * @param value the value to set.
   */
  public void setRating(java.lang.Float value) {
    this.rating = value;
  }

  /**
   * Gets the value of the 'cast' field.
   * @return The value of the 'cast' field.
   */
  public java.util.List<com.kaanaydemir.movie.schemas.Actor> getCast() {
    return cast;
  }

  /**
   * Sets the value of the 'cast' field.
   * @param value the value to set.
   */
  public void setCast(java.util.List<com.kaanaydemir.movie.schemas.Actor> value) {
    this.cast = value;
  }

  /**
   * Creates a new Movie RecordBuilder.
   * @return A new Movie RecordBuilder
   */
  public static com.kaanaydemir.movie.schemas.Movie.Builder newBuilder() {
    return new com.kaanaydemir.movie.schemas.Movie.Builder();
  }

  /**
   * Creates a new Movie RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Movie RecordBuilder
   */
  public static com.kaanaydemir.movie.schemas.Movie.Builder newBuilder(com.kaanaydemir.movie.schemas.Movie.Builder other) {
    return new com.kaanaydemir.movie.schemas.Movie.Builder(other);
  }

  /**
   * Creates a new Movie RecordBuilder by copying an existing Movie instance.
   * @param other The existing instance to copy.
   * @return A new Movie RecordBuilder
   */
  public static com.kaanaydemir.movie.schemas.Movie.Builder newBuilder(com.kaanaydemir.movie.schemas.Movie other) {
    return new com.kaanaydemir.movie.schemas.Movie.Builder(other);
  }

  /**
   * RecordBuilder for Movie instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Movie>
    implements org.apache.avro.data.RecordBuilder<Movie> {

    /** Movie Title */
    private java.lang.String title;
    private java.lang.String release_date;
    private float rating;
    private java.util.List<com.kaanaydemir.movie.schemas.Actor> cast;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kaanaydemir.movie.schemas.Movie.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.release_date)) {
        this.release_date = data().deepCopy(fields()[1].schema(), other.release_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rating)) {
        this.rating = data().deepCopy(fields()[2].schema(), other.rating);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cast)) {
        this.cast = data().deepCopy(fields()[3].schema(), other.cast);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Movie instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kaanaydemir.movie.schemas.Movie other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.release_date)) {
        this.release_date = data().deepCopy(fields()[1].schema(), other.release_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rating)) {
        this.rating = data().deepCopy(fields()[2].schema(), other.rating);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cast)) {
        this.cast = data().deepCopy(fields()[3].schema(), other.cast);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * Movie Title
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * Movie Title
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder setTitle(java.lang.String value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Movie Title
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * Movie Title
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'release_date' field.
      * @return The value.
      */
    public java.lang.String getReleaseDate() {
      return release_date;
    }

    /**
      * Sets the value of the 'release_date' field.
      * @param value The value of 'release_date'.
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder setReleaseDate(java.lang.String value) {
      validate(fields()[1], value);
      this.release_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'release_date' field has been set.
      * @return True if the 'release_date' field has been set, false otherwise.
      */
    public boolean hasReleaseDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'release_date' field.
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder clearReleaseDate() {
      release_date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rating' field.
      * @return The value.
      */
    public java.lang.Float getRating() {
      return rating;
    }

    /**
      * Sets the value of the 'rating' field.
      * @param value The value of 'rating'.
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder setRating(float value) {
      validate(fields()[2], value);
      this.rating = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rating' field has been set.
      * @return True if the 'rating' field has been set, false otherwise.
      */
    public boolean hasRating() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rating' field.
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder clearRating() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cast' field.
      * @return The value.
      */
    public java.util.List<com.kaanaydemir.movie.schemas.Actor> getCast() {
      return cast;
    }

    /**
      * Sets the value of the 'cast' field.
      * @param value The value of 'cast'.
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder setCast(java.util.List<com.kaanaydemir.movie.schemas.Actor> value) {
      validate(fields()[3], value);
      this.cast = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cast' field has been set.
      * @return True if the 'cast' field has been set, false otherwise.
      */
    public boolean hasCast() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'cast' field.
      * @return This builder.
      */
    public com.kaanaydemir.movie.schemas.Movie.Builder clearCast() {
      cast = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Movie build() {
      try {
        Movie record = new Movie();
        record.title = fieldSetFlags()[0] ? this.title : (java.lang.String) defaultValue(fields()[0]);
        record.release_date = fieldSetFlags()[1] ? this.release_date : (java.lang.String) defaultValue(fields()[1]);
        record.rating = fieldSetFlags()[2] ? this.rating : (java.lang.Float) defaultValue(fields()[2]);
        record.cast = fieldSetFlags()[3] ? this.cast : (java.util.List<com.kaanaydemir.movie.schemas.Actor>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Movie>
    WRITER$ = (org.apache.avro.io.DatumWriter<Movie>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Movie>
    READER$ = (org.apache.avro.io.DatumReader<Movie>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
